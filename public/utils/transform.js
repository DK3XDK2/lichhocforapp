import { getDateOfWeekday, START_DATE } from "./date.js";

function parseDateVN(str) {
  const [dd, mm, yyyy] = str.split("/");
  return new Date(`${yyyy}-${mm}-${dd}`);
}

function formatDate(dateObj) {
  const dd = String(dateObj.getDate()).padStart(2, "0");
  const mm = String(dateObj.getMonth() + 1).padStart(2, "0");
  const yyyy = dateObj.getFullYear();
  return `${dd}/${mm}/${yyyy}`;
}

function diffInWeeks(date1, date2) {
  const msPerWeek = 7 * 24 * 60 * 60 * 1000;
  const d1 = new Date(date1);
  const d2 = new Date(date2);
  d1.setHours(0, 0, 0, 0);
  d2.setHours(0, 0, 0, 0);
  return Math.floor((d2 - d1) / msPerWeek);
}

function extractSessions(tietStr) {
  const result = [];
  const lines = tietStr
    .split("\n")
    .map((l) => l.trim())
    .filter(Boolean);

  let currentFrom = null;
  let currentTo = null;

  for (const line of lines) {
    const dateMatch = line.match(
      /T·ª´\s(\d{2}\/\d{2}\/\d{4})\sƒë·∫øn\s(\d{2}\/\d{2}\/\d{4})/
    );
    if (dateMatch) {
      currentFrom = dateMatch[1];
      currentTo = dateMatch[2];
      continue;
    }

    if (
      (line.startsWith("Th·ª©") || line.toLowerCase().startsWith("ch·ªß")) &&
      currentFrom &&
      currentTo
    ) {
      const thuMatch = line.match(/(Th·ª©\s?(\d)|Ch·ªß\s*nh·∫≠t)/i);
      const tietMatch = line.match(/ti·∫øt\s([\d,]+)/);

      let thu = null;
      if (thuMatch) {
        if (thuMatch[0].toLowerCase().includes("ch·ªß")) {
          thu = 1;
        } else {
          thu = parseInt(thuMatch[2]);
        }
      }

      if (thu && tietMatch) {
        result.push({
          thu,
          period: tietMatch[1].trim(),
          from: currentFrom,
          to: currentTo,
        });
      }
    }
  }

  return result;
}

export function transformTimetableData(rawData) {
  const buoiIndexMap = {};
  const scheduleByDate = [];

  for (const item of rawData) {
    const { tiet, monHoc, phong, giangVien } = item;
    if (!monHoc || !tiet) continue;

    const sessions = extractSessions(tiet);
    const tenMon = item.lop?.split("(")[0].trim() || "";
    const subjectKey = `${monHoc.trim()} - ${tenMon}`;
    if (!buoiIndexMap[subjectKey]) buoiIndexMap[subjectKey] = 0;

    for (const ses of sessions) {
      const { thu, period, from, to } = ses;

      const startDate = parseDateVN(from);
      const endDate = parseDateVN(to);
      const weeksToLearn = getWeeksFromRoomString(phong);

      // T√≠nh ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c kho·∫£ng tu·∫ßn h·ª£p l·ªá d·ª±a theo d·ªØ li·ªáu th·ª±c t·∫ø
      const startOfValidRange = new Date(START_DATE); // tu·∫ßn 1
      const weeksInRoom = getWeeksFromRoomString(phong);
      const maxWeek = Math.max(...weeksInRoom, 20); // √©p t·ªëi thi·ªÉu l√† 20

      const endOfValidRange = new Date(START_DATE);
      endOfValidRange.setDate(endOfValidRange.getDate() + maxWeek * 7 - 1);

      for (
        let d = new Date(startDate);
        d <= endDate;
        d.setDate(d.getDate() + 7)
      ) {
        const realDate = getDateOfWeekday(d, thu);
        const deltaWeeks = diffInWeeks(START_DATE, realDate);
        const weekNumber = deltaWeeks + 1;

        const realDateObj = new Date(realDate);
        if (realDateObj < startOfValidRange || realDateObj > endOfValidRange) {
          const reason =
            realDateObj < startOfValidRange
              ? "tr∆∞·ªõc tu·∫ßn 1"
              : `ngo√†i tu·∫ßn ch·ªâ ƒë·ªãnh (1 ‚Üí ${maxWeek})`;
          console.warn(
            `‚ö†Ô∏è B·ªé BU·ªîI: ${monHoc} - ${tenMon} | Ng√†y: ${realDate} (${formatDate(
              realDateObj
            )}) | L√Ω do: ${reason}`
          );
          continue;
        }

        const buoiIndex = ++buoiIndexMap[subjectKey];
        const resolvedRoom =
          getRoomForWeek(phong, buoiIndex) || "Kh√¥ng r√µ ph√≤ng";

        console.log(
          `üìö ${subjectKey} | Bu·ªïi ${buoiIndex} | Tu·∫ßn ${weekNumber} | Ng√†y: ${formatDate(
            realDateObj
          )} | Ph√≤ng: ${resolvedRoom}`
        );

        scheduleByDate.push({
          subject: `${monHoc.trim()} - ${tenMon}`,
          teacher: giangVien.split("(")[0].trim(),
          room: resolvedRoom,
          period,
          day: realDate,
          week: weekNumber,
        });
      }
    }
  }

  if (scheduleByDate.length === 0) return {};

  const firstDate = new Date(START_DATE);
  firstDate.setHours(0, 0, 0, 0);
  const weeks = {};

  for (const lesson of scheduleByDate) {
    const lessonDate = new Date(lesson.day);
    lessonDate.setHours(0, 0, 0, 0);

    const deltaWeeks = diffInWeeks(firstDate, lessonDate);
    const weekStart = new Date(
      firstDate.getTime() + deltaWeeks * 7 * 86400 * 1000
    );
    const weekEnd = new Date(weekStart.getTime() + 6 * 86400 * 1000);

    const weekLabel = `Tu·∫ßn ${deltaWeeks + 1} (${formatDate(
      weekStart
    )} ƒë·∫øn ${formatDate(weekEnd)})`;

    if (!weeks[weekLabel]) {
      weeks[weekLabel] = {};
      for (let i = 0; i < 7; i++) {
        const d = new Date(weekStart);
        d.setDate(weekStart.getDate() + i);
        const dateStr = d.toISOString().split("T")[0];
        weeks[weekLabel][dateStr] = [];
      }
    }

    const dayKey = lesson.day;
    if (!weeks[weekLabel][dayKey]) {
      weeks[weekLabel][dayKey] = [];
    }

    weeks[weekLabel][dayKey].push({
      subject: lesson.subject,
      teacher: lesson.teacher,
      room: lesson.room,
      period: lesson.period,
      day: dayKey,
      week: lesson.week,
    });
  }

  return weeks;
}

function getWeeksFromRoomString(roomStr) {
  const weekSet = new Set();
  const lines = roomStr
    .split("\n")
    .map((l) => l.trim())
    .filter(Boolean);

  for (const line of lines) {
    const match = line.match(/\(([\d,\s]+)\)/);
    if (match) {
      const weeks = match[1].split(",").map((s) => parseInt(s.trim(), 10));
      weeks.forEach((w) => {
        if (!isNaN(w)) weekSet.add(w);
      });
    }
  }

  return Array.from(weekSet).sort((a, b) => a - b);
}

function getRoomForWeek(roomStr, weekNumber) {
  const lines = roomStr
    .split("\n")
    .map((l) => l.trim())
    .filter(Boolean);

  const pairs = [];

  for (let i = 0; i < lines.length - 1; i++) {
    const weekMatch = lines[i].match(/\(([\d,\s]+)\)/);
    if (weekMatch) {
      const weeks = weekMatch[1]
        .split(",")
        .map((s) => parseInt(s.trim(), 10))
        .filter(Boolean);

      const roomLine = lines[i + 1];
      if (roomLine && !roomLine.match(/\(\d/)) {
        pairs.push({ weeks, room: roomLine });
      }
    }
  }

  // üêû Debug c·∫∑p tu·∫ßn‚Äìph√≤ng
  console.log("üß© Pairs tu·∫ßn‚Äìph√≤ng:");
  pairs.forEach((p, i) =>
    console.log(`  [${i}] Tu·∫ßn: ${p.weeks.join(",")} ‚Üí Ph√≤ng: ${p.room}`)
  );

  for (const pair of pairs) {
    if (pair.weeks.includes(weekNumber)) {
      console.log(`‚úÖ Tu·∫ßn ${weekNumber} ‚Üí kh·ªõp ph√≤ng: ${pair.room}`);
      return pair.room;
    }
  }

  // üõë Kh√¥ng match ƒë∆∞·ª£c
  console.warn(`‚ö†Ô∏è Tu·∫ßn ${weekNumber} ‚Üí KH√îNG t√¨m th·∫•y ph√≤ng ph√π h·ª£p.`);

  // fallback n·∫øu kh√¥ng c√≥ match
  if (pairs.length === 0 && lines.length === 1) {
    console.log(`üí° Fallback: ch·ªâ c√≥ 1 d√≤ng ‚Üí d√πng ph√≤ng: ${lines[0]}`);
    return lines[0];
  }

  const lastLine = lines[lines.length - 1];
  if (!lastLine.match(/\(\d/)) {
    console.log(`üí° Fallback: l·∫•y d√≤ng cu·ªëi r√µ r√†ng ‚Üí ph√≤ng: ${lastLine}`);
    return lastLine;
  }

  console.log(`üö´ Kh√¥ng r√µ ph√≤ng cho tu·∫ßn ${weekNumber}`);
  return "Kh√¥ng r√µ ph√≤ng";
}
