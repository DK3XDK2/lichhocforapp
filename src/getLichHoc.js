const puppeteer = require("puppeteer");
const fs = require("fs");

async function getLichHoc(mssv, matkhau) {
  const browser = await puppeteer.launch({
    headless: "new",
    slowMo: 0,
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
    timeout: 0,
  });

  const page = await browser.newPage();

  let popupMessage = null;
  let popupAppeared = false;

  // X·ª≠ l√Ω dialog + ch·ªù load l·∫°i n·∫øu c√≥
  page.on("dialog", async (dialog) => {
    popupAppeared = true;
    popupMessage = dialog.message();
    console.log("‚ö†Ô∏è [POPUP] Xu·∫•t hi·ªán:", popupMessage);

    // B·∫•m OK v√† ch·ªù trang chuy·ªÉn n·∫øu c√≥
    await Promise.all([
      dialog.accept(),
      page
        .waitForNavigation({ waitUntil: "domcontentloaded", timeout: 10000 })
        .catch(() => null),
    ]);
  });

  try {
    await page.setUserAgent(
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    );

    console.log("üîê Truy c·∫≠p trang ƒëƒÉng nh·∫≠p...");
    await page.goto("https://dangkytinchi.ictu.edu.vn/kcntt/login.aspx", {
      waitUntil: "domcontentloaded",
      timeout: 60000,
    });

    await page.type('input[name="txtUserName"]', mssv);
    await page.type('input[name="txtPassword"]', matkhau);

    console.log("üîê B·∫•m ƒëƒÉng nh·∫≠p...");
    await Promise.all([
      page.click('input[name="btnSubmit"]'),
      page
        .waitForNavigation({ waitUntil: "domcontentloaded", timeout: 10000 })
        .catch(() => null),
    ]);

    const loginError = await page.evaluate(() => {
      const el = document.querySelector(".labelError");
      return el ? el.innerText.trim() : null;
    });
    if (loginError) throw new Error("‚ùå Sai m√£ sinh vi√™n ho·∫∑c m·∫≠t kh·∫©u!");

    const fullInfo = await page.evaluate(() => {
      const el = document.querySelector("#PageHeader1_lblUserFullName");
      return el ? el.innerText.trim() : "__NOT_FOUND__";
    });

    let name = "",
      mssvFromWeb = mssv;
    const match = fullInfo.match(/^(.+?)\s*\((.+)\)$/);
    if (match) {
      name = match[1].trim();
      mssvFromWeb = match[2].trim();
    }

    console.log("üë§ H·ªç t√™n sau login:", name);

    if (popupAppeared && popupMessage?.includes("h·∫øt h·∫°n ƒëƒÉng k√Ω")) {
      console.warn(
        "‚ö†Ô∏è T√†i kho·∫£n ƒë√£ h·∫øt h·∫°n ƒëƒÉng k√Ω, v·∫´n th·ª≠ v√†o trang l·ªãch h·ªçc..."
      );
    }

    console.log("üåê Truy c·∫≠p trang l·ªãch h·ªçc...");
    await page.goto(
      "https://dangkytinchi.ictu.edu.vn/kcntt/Reports/Form/StudentTimeTable.aspx",
      { waitUntil: "domcontentloaded", timeout: 60000 }
    );

    // Ki·ªÉm tra b·ªã redirect sau khi v√†o trang l·ªãch h·ªçc
    const currentUrl = page.url();
    if (currentUrl.includes("StudyRegister")) {
      throw new Error(
        "‚ùå B·ªã chuy·ªÉn h∆∞·ªõng v√¨ t√†i kho·∫£n ƒë√£ h·∫øt h·∫°n ƒëƒÉng k√Ω h·ªçc."
      );
    }

    const hasTable = await page.$("#gridRegistered");
    if (!hasTable) {
      throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y b·∫£ng l·ªãch h·ªçc ‚Äî c√≥ th·ªÉ ch∆∞a c√≥ l·ªãch.");
    }

    await page.waitForSelector("#gridRegistered", { timeout: 10000 });

    const data = await page.evaluate(() => {
      const rows = Array.from(
        document.querySelectorAll("#gridRegistered tr")
      ).slice(1);
      return rows.map((row) => {
        const cells = row.querySelectorAll("td");
        return {
          thu: cells[0]?.innerText.trim(),
          lop: cells[1]?.innerText.trim(),
          monHoc: cells[2]?.innerText.trim(),
          tiet: cells[3]?.innerText.trim(),
          phong: cells[4]?.innerText.trim(),
          giangVien: cells[5]?.innerText.trim(),
          tuan: cells[6]?.innerText.trim(),
        };
      });
    });

    const savePath = `./data/${mssvFromWeb}_lichhoc.json`;
    fs.writeFileSync(savePath, JSON.stringify(data, null, 2), "utf-8");

    console.log(`‚úÖ ƒê√£ l∆∞u l·ªãch h·ªçc v√†o: ${savePath}`);
    return { name, mssv: mssvFromWeb, data };
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y l·ªãch h·ªçc:", err.message);
    throw err;
  } finally {
    await browser.close();
  }
}

module.exports = getLichHoc;
